// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa client
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package mpesa

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Client is the "mpesa" service client.
type Client struct {
	AccountBalanceTimeoutEndpoint           endpoint.Endpoint
	AccountBalanceResultEndpointEndpoint    endpoint.Endpoint
	TransactionStatusTimeoutEndpoint        endpoint.Endpoint
	TransactionStatusResultEndpointEndpoint endpoint.Endpoint
	ReversalTimeoutEndpoint                 endpoint.Endpoint
	ReversalResultEndpointEndpoint          endpoint.Endpoint
	B2CTimeoutEndpoint                      endpoint.Endpoint
	B2CResultEndpoint                       endpoint.Endpoint
	C2BValidationEndpoint                   endpoint.Endpoint
	C2BConfirmationEndpoint                 endpoint.Endpoint
}

// NewClient initializes a "mpesa" service client given the endpoints.
func NewClient(accountBalanceTimeout, accountBalanceResultEndpoint, transactionStatusTimeout, transactionStatusResultEndpoint, reversalTimeout, reversalResultEndpoint, b2CTimeout, b2CResult, c2BValidation, c2BConfirmation endpoint.Endpoint) *Client {
	return &Client{
		AccountBalanceTimeoutEndpoint:           accountBalanceTimeout,
		AccountBalanceResultEndpointEndpoint:    accountBalanceResultEndpoint,
		TransactionStatusTimeoutEndpoint:        transactionStatusTimeout,
		TransactionStatusResultEndpointEndpoint: transactionStatusResultEndpoint,
		ReversalTimeoutEndpoint:                 reversalTimeout,
		ReversalResultEndpointEndpoint:          reversalResultEndpoint,
		B2CTimeoutEndpoint:                      b2CTimeout,
		B2CResultEndpoint:                       b2CResult,
		C2BValidationEndpoint:                   c2BValidation,
		C2BConfirmationEndpoint:                 c2BConfirmation,
	}
}

// AccountBalanceTimeout calls the "AccountBalanceTimeout" endpoint of the
// "mpesa" service.
func (c *Client) AccountBalanceTimeout(ctx context.Context, p *AccountBalanceResult) (res string, err error) {
	var ires interface{}
	ires, err = c.AccountBalanceTimeoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// AccountBalanceResultEndpoint calls the "AccountBalanceResult" endpoint of
// the "mpesa" service.
func (c *Client) AccountBalanceResultEndpoint(ctx context.Context, p *AccountBalanceResult) (res string, err error) {
	var ires interface{}
	ires, err = c.AccountBalanceResultEndpointEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// TransactionStatusTimeout calls the "TransactionStatusTimeout" endpoint of
// the "mpesa" service.
func (c *Client) TransactionStatusTimeout(ctx context.Context, p *TransactionStatusResult) (res string, err error) {
	var ires interface{}
	ires, err = c.TransactionStatusTimeoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// TransactionStatusResultEndpoint calls the "TransactionStatusResult" endpoint
// of the "mpesa" service.
func (c *Client) TransactionStatusResultEndpoint(ctx context.Context, p *TransactionStatusResult) (res string, err error) {
	var ires interface{}
	ires, err = c.TransactionStatusResultEndpointEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// ReversalTimeout calls the "ReversalTimeout" endpoint of the "mpesa" service.
func (c *Client) ReversalTimeout(ctx context.Context, p *ReversalResult) (res string, err error) {
	var ires interface{}
	ires, err = c.ReversalTimeoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// ReversalResultEndpoint calls the "ReversalResult" endpoint of the "mpesa"
// service.
func (c *Client) ReversalResultEndpoint(ctx context.Context, p *ReversalResult) (res string, err error) {
	var ires interface{}
	ires, err = c.ReversalResultEndpointEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// B2CTimeout calls the "B2CTimeout" endpoint of the "mpesa" service.
func (c *Client) B2CTimeout(ctx context.Context, p *B2CPaymentResult) (res string, err error) {
	var ires interface{}
	ires, err = c.B2CTimeoutEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// B2CResult calls the "B2CResult" endpoint of the "mpesa" service.
func (c *Client) B2CResult(ctx context.Context, p *B2CPaymentResult) (res string, err error) {
	var ires interface{}
	ires, err = c.B2CResultEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// C2BValidation calls the "C2BValidation" endpoint of the "mpesa" service.
func (c *Client) C2BValidation(ctx context.Context, p *ValidationResult) (res string, err error) {
	var ires interface{}
	ires, err = c.C2BValidationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// C2BConfirmation calls the "C2BConfirmation" endpoint of the "mpesa" service.
func (c *Client) C2BConfirmation(ctx context.Context, p *ConfirmationResult) (res string, err error) {
	var ires interface{}
	ires, err = c.C2BConfirmationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
