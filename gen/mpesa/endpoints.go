// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa endpoints
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package mpesa

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "mpesa" service endpoints.
type Endpoints struct {
	AccountBalanceTimeout           endpoint.Endpoint
	AccountBalanceResultEndpoint    endpoint.Endpoint
	TransactionStatusTimeout        endpoint.Endpoint
	TransactionStatusResultEndpoint endpoint.Endpoint
	ReversalTimeout                 endpoint.Endpoint
	ReversalResultEndpoint          endpoint.Endpoint
	B2CTimeout                      endpoint.Endpoint
	B2CResult                       endpoint.Endpoint
	C2BValidation                   endpoint.Endpoint
	C2BConfirmation                 endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "mpesa" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		AccountBalanceTimeout:           NewAccountBalanceTimeoutEndpoint(s),
		AccountBalanceResultEndpoint:    NewAccountBalanceResultEndpointEndpoint(s),
		TransactionStatusTimeout:        NewTransactionStatusTimeoutEndpoint(s),
		TransactionStatusResultEndpoint: NewTransactionStatusResultEndpointEndpoint(s),
		ReversalTimeout:                 NewReversalTimeoutEndpoint(s),
		ReversalResultEndpoint:          NewReversalResultEndpointEndpoint(s),
		B2CTimeout:                      NewB2CTimeoutEndpoint(s),
		B2CResult:                       NewB2CResultEndpoint(s),
		C2BValidation:                   NewC2BValidationEndpoint(s),
		C2BConfirmation:                 NewC2BConfirmationEndpoint(s),
	}
}

// Use applies the given middleware to all the "mpesa" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.AccountBalanceTimeout = m(e.AccountBalanceTimeout)
	e.AccountBalanceResultEndpoint = m(e.AccountBalanceResultEndpoint)
	e.TransactionStatusTimeout = m(e.TransactionStatusTimeout)
	e.TransactionStatusResultEndpoint = m(e.TransactionStatusResultEndpoint)
	e.ReversalTimeout = m(e.ReversalTimeout)
	e.ReversalResultEndpoint = m(e.ReversalResultEndpoint)
	e.B2CTimeout = m(e.B2CTimeout)
	e.B2CResult = m(e.B2CResult)
	e.C2BValidation = m(e.C2BValidation)
	e.C2BConfirmation = m(e.C2BConfirmation)
}

// NewAccountBalanceTimeoutEndpoint returns an endpoint function that calls the
// method "AccountBalanceTimeout" of service "mpesa".
func NewAccountBalanceTimeoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AccountBalanceResult)
		return s.AccountBalanceTimeout(ctx, p)
	}
}

// NewAccountBalanceResultEndpointEndpoint returns an endpoint function that
// calls the method "AccountBalanceResult" of service "mpesa".
func NewAccountBalanceResultEndpointEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AccountBalanceResult)
		return s.AccountBalanceResultEndpoint(ctx, p)
	}
}

// NewTransactionStatusTimeoutEndpoint returns an endpoint function that calls
// the method "TransactionStatusTimeout" of service "mpesa".
func NewTransactionStatusTimeoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TransactionStatusResult)
		return s.TransactionStatusTimeout(ctx, p)
	}
}

// NewTransactionStatusResultEndpointEndpoint returns an endpoint function that
// calls the method "TransactionStatusResult" of service "mpesa".
func NewTransactionStatusResultEndpointEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TransactionStatusResult)
		return s.TransactionStatusResultEndpoint(ctx, p)
	}
}

// NewReversalTimeoutEndpoint returns an endpoint function that calls the
// method "ReversalTimeout" of service "mpesa".
func NewReversalTimeoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ReversalResult)
		return s.ReversalTimeout(ctx, p)
	}
}

// NewReversalResultEndpointEndpoint returns an endpoint function that calls
// the method "ReversalResult" of service "mpesa".
func NewReversalResultEndpointEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ReversalResult)
		return s.ReversalResultEndpoint(ctx, p)
	}
}

// NewB2CTimeoutEndpoint returns an endpoint function that calls the method
// "B2CTimeout" of service "mpesa".
func NewB2CTimeoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*B2CPaymentResult)
		return s.B2CTimeout(ctx, p)
	}
}

// NewB2CResultEndpoint returns an endpoint function that calls the method
// "B2CResult" of service "mpesa".
func NewB2CResultEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*B2CPaymentResult)
		return s.B2CResult(ctx, p)
	}
}

// NewC2BValidationEndpoint returns an endpoint function that calls the method
// "C2BValidation" of service "mpesa".
func NewC2BValidationEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ValidationResult)
		return s.C2BValidation(ctx, p)
	}
}

// NewC2BConfirmationEndpoint returns an endpoint function that calls the
// method "C2BConfirmation" of service "mpesa".
func NewC2BConfirmationEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ConfirmationResult)
		return s.C2BConfirmation(ctx, p)
	}
}
