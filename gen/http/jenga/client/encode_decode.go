// Code generated by goa v3.1.2, DO NOT EDIT.
//
// jenga HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	jenga "github.com/wondenge/listeners/gen/jenga"
	goahttp "goa.design/goa/v3/http"
)

// BuildPublishRequest instantiates a HTTP request object with method and path
// set to call the "jenga" service "publish" endpoint
func (c *Client) BuildPublishRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PublishJengaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("jenga", "publish", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePublishRequest returns an encoder for requests sent to the jenga
// publish server.
func EncodePublishRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*jenga.JengaCallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("jenga", "publish", "*jenga.JengaCallbackPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewPublishRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("jenga", "publish", err)
		}
		return nil
	}
}

// DecodePublishResponse returns a decoder for responses returned by the jenga
// publish endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodePublishResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PublishResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("jenga", "publish", err)
			}
			res := NewPublishJengaCallbackMediaOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("jenga", "publish", resp.StatusCode, string(body))
		}
	}
}

// BuildAlertsRequest instantiates a HTTP request object with method and path
// set to call the "jenga" service "alerts" endpoint
func (c *Client) BuildAlertsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AlertsJengaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("jenga", "alerts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAlertsRequest returns an encoder for requests sent to the jenga alerts
// server.
func EncodeAlertsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*jenga.AccountAlerts)
		if !ok {
			return goahttp.ErrInvalidType("jenga", "alerts", "*jenga.AccountAlerts", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewAlertsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("jenga", "alerts", err)
		}
		return nil
	}
}

// DecodeAlertsResponse returns a decoder for responses returned by the jenga
// alerts endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAlertsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("jenga", "alerts", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("jenga", "alerts", resp.StatusCode, string(body))
		}
	}
}
