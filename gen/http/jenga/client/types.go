// Code generated by goa v3.1.2, DO NOT EDIT.
//
// jenga HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	jenga "github.com/wondenge/listeners/gen/jenga"
)

// PublishRequestBody is the type of the "jenga" service "publish" endpoint
// HTTP request body.
type PublishRequestBody struct {
	// recipient phone number
	MobileNumber *string `form:"mobileNumber,omitempty" json:"mobileNumber,omitempty" xml:"mobileNumber,omitempty"`
	// recipient name
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// reference number
	Rrn *string `form:"rrn,omitempty" json:"rrn,omitempty" xml:"rrn,omitempty"`
	// for M-Pesa the value is M-Pesa
	Service *string `form:"service,omitempty" json:"service,omitempty" xml:"service,omitempty"`
	// M-Pesa receipt number
	TranID *string `form:"tranID,omitempty" json:"tranID,omitempty" xml:"tranID,omitempty"`
	// M-Pesa return code
	ResultCode *string `form:"resultCode,omitempty" json:"resultCode,omitempty" xml:"resultCode,omitempty"`
	// M-Pesa return code description
	ResultDescription *string `form:"resultDescription,omitempty" json:"resultDescription,omitempty" xml:"resultDescription,omitempty"`
	// Additional information
	AdditionalInfo *string `form:"additionalInfo,omitempty" json:"additionalInfo,omitempty" xml:"additionalInfo,omitempty"`
}

// AlertsRequestBody is the type of the "jenga" service "alerts" endpoint HTTP
// request body.
type AlertsRequestBody struct {
	Name         *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	MobileNumber *string `form:"mobileNumber,omitempty" json:"mobileNumber,omitempty" xml:"mobileNumber,omitempty"`
	// S2596405
	Reference *string `form:"reference,omitempty" json:"reference,omitempty" xml:"reference,omitempty"`
	// date
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// paymentMode
	PaymentMode *string `form:"paymentMode,omitempty" json:"paymentMode,omitempty" xml:"paymentMode,omitempty"`
	// amount
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	Till   *string `form:"till,omitempty" json:"till,omitempty" xml:"till,omitempty"`
	// billNumber
	BillNumber *string `form:"billNumber,omitempty" json:"billNumber,omitempty" xml:"billNumber,omitempty"`
	// orderAmount
	OrderAmount *string `form:"orderAmount,omitempty" json:"orderAmount,omitempty" xml:"orderAmount,omitempty"`
	// serviceCharge
	ServiceCharge *string `form:"serviceCharge,omitempty" json:"serviceCharge,omitempty" xml:"serviceCharge,omitempty"`
	ServedBy      *string `form:"servedBy,omitempty" json:"servedBy,omitempty" xml:"servedBy,omitempty"`
	// additionalInfo
	AdditionalInfo *string `form:"additionalInfo,omitempty" json:"additionalInfo,omitempty" xml:"additionalInfo,omitempty"`
	// transactionType
	TransactionType *string `form:"transactionType,omitempty" json:"transactionType,omitempty" xml:"transactionType,omitempty"`
	// account
	Account *string `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
}

// PublishResponseBody is the type of the "jenga" service "publish" endpoint
// HTTP response body.
type PublishResponseBody struct {
	Code    *string `form:"Code,omitempty" json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `form:"Message,omitempty" json:"Message,omitempty" xml:"Message,omitempty"`
}

// NewPublishRequestBody builds the HTTP request body from the payload of the
// "publish" endpoint of the "jenga" service.
func NewPublishRequestBody(p *jenga.JengaCallbackPayload) *PublishRequestBody {
	body := &PublishRequestBody{
		MobileNumber:      p.MobileNumber,
		Message:           p.Message,
		Rrn:               p.Rrn,
		Service:           p.Service,
		TranID:            p.TranID,
		ResultCode:        p.ResultCode,
		ResultDescription: p.ResultDescription,
		AdditionalInfo:    p.AdditionalInfo,
	}
	return body
}

// NewAlertsRequestBody builds the HTTP request body from the payload of the
// "alerts" endpoint of the "jenga" service.
func NewAlertsRequestBody(p *jenga.AccountAlerts) *AlertsRequestBody {
	body := &AlertsRequestBody{
		Name:            p.Name,
		MobileNumber:    p.MobileNumber,
		Reference:       p.Reference,
		Date:            p.Date,
		PaymentMode:     p.PaymentMode,
		Amount:          p.Amount,
		Till:            p.Till,
		BillNumber:      p.BillNumber,
		OrderAmount:     p.OrderAmount,
		ServiceCharge:   p.ServiceCharge,
		ServedBy:        p.ServedBy,
		AdditionalInfo:  p.AdditionalInfo,
		TransactionType: p.TransactionType,
		Account:         p.Account,
	}
	return body
}

// NewPublishJengaCallbackMediaOK builds a "jenga" service "publish" endpoint
// result from a HTTP "OK" response.
func NewPublishJengaCallbackMediaOK(body *PublishResponseBody) *jenga.JengaCallbackMedia {
	v := &jenga.JengaCallbackMedia{
		Code:    body.Code,
		Message: body.Message,
	}

	return v
}
