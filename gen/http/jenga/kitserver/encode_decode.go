// Code generated by goa v3.1.2, DO NOT EDIT.
//
// jenga go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/listeners/gen/http/jenga/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodePublishResponse returns a go-kit EncodeResponseFunc suitable for
// encoding jenga publish responses.
func EncodePublishResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodePublishResponse(encoder)
}

// DecodePublishRequest returns a go-kit DecodeRequestFunc suitable for
// decoding jenga publish requests.
func DecodePublishRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodePublishRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAlertsResponse returns a go-kit EncodeResponseFunc suitable for
// encoding jenga alerts responses.
func EncodeAlertsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAlertsResponse(encoder)
}

// DecodeAlertsRequest returns a go-kit DecodeRequestFunc suitable for decoding
// jenga alerts requests.
func DecodeAlertsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAlertsRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}
