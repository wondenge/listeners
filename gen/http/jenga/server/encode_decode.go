// Code generated by goa v3.1.2, DO NOT EDIT.
//
// jenga HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"context"
	"io"
	"net/http"

	jenga "github.com/wondenge/listeners/gen/jenga"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodePublishResponse returns an encoder for responses returned by the jenga
// publish endpoint.
func EncodePublishResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*jenga.JengaCallbackMedia)
		enc := encoder(ctx, w)
		body := NewPublishResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePublishRequest returns a decoder for requests sent to the jenga
// publish endpoint.
func DecodePublishRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PublishRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			auth *string
		)
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		payload := NewPublishJengaCallbackPayload(&body, auth)

		return payload, nil
	}
}

// EncodeAlertsResponse returns an encoder for responses returned by the jenga
// alerts endpoint.
func EncodeAlertsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAlertsRequest returns a decoder for requests sent to the jenga alerts
// endpoint.
func DecodeAlertsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AlertsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAlertsRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			auth *string
		)
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		payload := NewAlertsAccountAlerts(&body, auth)

		return payload, nil
	}
}
