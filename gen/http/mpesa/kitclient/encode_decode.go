// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa go-kit HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/listeners/gen/http/mpesa/client"
	goahttp "goa.design/goa/v3/http"
)

// EncodeAccountBalanceTimeoutRequest returns a go-kit EncodeRequestFunc
// suitable for encoding mpesa AccountBalanceTimeout requests.
func EncodeAccountBalanceTimeoutRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountBalanceTimeoutRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountBalanceTimeoutResponse returns a go-kit DecodeResponseFunc
// suitable for decoding mpesa AccountBalanceTimeout responses.
func DecodeAccountBalanceTimeoutResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountBalanceTimeoutResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeAccountBalanceResultEndpointRequest returns a go-kit EncodeRequestFunc
// suitable for encoding mpesa AccountBalanceResult requests.
func EncodeAccountBalanceResultEndpointRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeAccountBalanceResultEndpointRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeAccountBalanceResultEndpointResponse returns a go-kit
// DecodeResponseFunc suitable for decoding mpesa AccountBalanceResult
// responses.
func DecodeAccountBalanceResultEndpointResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeAccountBalanceResultEndpointResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeTransactionStatusTimeoutRequest returns a go-kit EncodeRequestFunc
// suitable for encoding mpesa TransactionStatusTimeout requests.
func EncodeTransactionStatusTimeoutRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeTransactionStatusTimeoutRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeTransactionStatusTimeoutResponse returns a go-kit DecodeResponseFunc
// suitable for decoding mpesa TransactionStatusTimeout responses.
func DecodeTransactionStatusTimeoutResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeTransactionStatusTimeoutResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeTransactionStatusResultEndpointRequest returns a go-kit
// EncodeRequestFunc suitable for encoding mpesa TransactionStatusResult
// requests.
func EncodeTransactionStatusResultEndpointRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeTransactionStatusResultEndpointRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeTransactionStatusResultEndpointResponse returns a go-kit
// DecodeResponseFunc suitable for decoding mpesa TransactionStatusResult
// responses.
func DecodeTransactionStatusResultEndpointResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeTransactionStatusResultEndpointResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeReversalTimeoutRequest returns a go-kit EncodeRequestFunc suitable for
// encoding mpesa ReversalTimeout requests.
func EncodeReversalTimeoutRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeReversalTimeoutRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeReversalTimeoutResponse returns a go-kit DecodeResponseFunc suitable
// for decoding mpesa ReversalTimeout responses.
func DecodeReversalTimeoutResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeReversalTimeoutResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeReversalResultEndpointRequest returns a go-kit EncodeRequestFunc
// suitable for encoding mpesa ReversalResult requests.
func EncodeReversalResultEndpointRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeReversalResultEndpointRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeReversalResultEndpointResponse returns a go-kit DecodeResponseFunc
// suitable for decoding mpesa ReversalResult responses.
func DecodeReversalResultEndpointResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeReversalResultEndpointResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeB2CTimeoutRequest returns a go-kit EncodeRequestFunc suitable for
// encoding mpesa B2CTimeout requests.
func EncodeB2CTimeoutRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeB2CTimeoutRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeB2CTimeoutResponse returns a go-kit DecodeResponseFunc suitable for
// decoding mpesa B2CTimeout responses.
func DecodeB2CTimeoutResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeB2CTimeoutResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeB2CResultRequest returns a go-kit EncodeRequestFunc suitable for
// encoding mpesa B2CResult requests.
func EncodeB2CResultRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeB2CResultRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeB2CResultResponse returns a go-kit DecodeResponseFunc suitable for
// decoding mpesa B2CResult responses.
func DecodeB2CResultResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeB2CResultResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeC2BValidationRequest returns a go-kit EncodeRequestFunc suitable for
// encoding mpesa C2BValidation requests.
func EncodeC2BValidationRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeC2BValidationRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeC2BValidationResponse returns a go-kit DecodeResponseFunc suitable for
// decoding mpesa C2BValidation responses.
func DecodeC2BValidationResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeC2BValidationResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}

// EncodeC2BConfirmationRequest returns a go-kit EncodeRequestFunc suitable for
// encoding mpesa C2BConfirmation requests.
func EncodeC2BConfirmationRequest(encoder func(*http.Request) goahttp.Encoder) kithttp.EncodeRequestFunc {
	enc := client.EncodeC2BConfirmationRequest(encoder)
	return func(_ context.Context, r *http.Request, v interface{}) error {
		return enc(r, v)
	}
}

// DecodeC2BConfirmationResponse returns a go-kit DecodeResponseFunc suitable
// for decoding mpesa C2BConfirmation responses.
func DecodeC2BConfirmationResponse(decoder func(*http.Response) goahttp.Decoder) kithttp.DecodeResponseFunc {
	dec := client.DecodeC2BConfirmationResponse(decoder, false)
	return func(ctx context.Context, resp *http.Response) (interface{}, error) {
		return dec(resp)
	}
}
