// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/listeners/gen/http/mpesa/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeAccountBalanceTimeoutResponse returns a go-kit EncodeResponseFunc
// suitable for encoding mpesa AccountBalanceTimeout responses.
func EncodeAccountBalanceTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountBalanceTimeoutResponse(encoder)
}

// DecodeAccountBalanceTimeoutRequest returns a go-kit DecodeRequestFunc
// suitable for decoding mpesa AccountBalanceTimeout requests.
func DecodeAccountBalanceTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountBalanceTimeoutRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeAccountBalanceResultEndpointResponse returns a go-kit
// EncodeResponseFunc suitable for encoding mpesa AccountBalanceResult
// responses.
func EncodeAccountBalanceResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeAccountBalanceResultEndpointResponse(encoder)
}

// DecodeAccountBalanceResultEndpointRequest returns a go-kit DecodeRequestFunc
// suitable for decoding mpesa AccountBalanceResult requests.
func DecodeAccountBalanceResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeAccountBalanceResultEndpointRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeTransactionStatusTimeoutResponse returns a go-kit EncodeResponseFunc
// suitable for encoding mpesa TransactionStatusTimeout responses.
func EncodeTransactionStatusTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeTransactionStatusTimeoutResponse(encoder)
}

// DecodeTransactionStatusTimeoutRequest returns a go-kit DecodeRequestFunc
// suitable for decoding mpesa TransactionStatusTimeout requests.
func DecodeTransactionStatusTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeTransactionStatusTimeoutRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeTransactionStatusResultEndpointResponse returns a go-kit
// EncodeResponseFunc suitable for encoding mpesa TransactionStatusResult
// responses.
func EncodeTransactionStatusResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeTransactionStatusResultEndpointResponse(encoder)
}

// DecodeTransactionStatusResultEndpointRequest returns a go-kit
// DecodeRequestFunc suitable for decoding mpesa TransactionStatusResult
// requests.
func DecodeTransactionStatusResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeTransactionStatusResultEndpointRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeReversalTimeoutResponse returns a go-kit EncodeResponseFunc suitable
// for encoding mpesa ReversalTimeout responses.
func EncodeReversalTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeReversalTimeoutResponse(encoder)
}

// DecodeReversalTimeoutRequest returns a go-kit DecodeRequestFunc suitable for
// decoding mpesa ReversalTimeout requests.
func DecodeReversalTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeReversalTimeoutRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeReversalResultEndpointResponse returns a go-kit EncodeResponseFunc
// suitable for encoding mpesa ReversalResult responses.
func EncodeReversalResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeReversalResultEndpointResponse(encoder)
}

// DecodeReversalResultEndpointRequest returns a go-kit DecodeRequestFunc
// suitable for decoding mpesa ReversalResult requests.
func DecodeReversalResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeReversalResultEndpointRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeB2CTimeoutResponse returns a go-kit EncodeResponseFunc suitable for
// encoding mpesa B2CTimeout responses.
func EncodeB2CTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeB2CTimeoutResponse(encoder)
}

// DecodeB2CTimeoutRequest returns a go-kit DecodeRequestFunc suitable for
// decoding mpesa B2CTimeout requests.
func DecodeB2CTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeB2CTimeoutRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeB2CResultResponse returns a go-kit EncodeResponseFunc suitable for
// encoding mpesa B2CResult responses.
func EncodeB2CResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeB2CResultResponse(encoder)
}

// DecodeB2CResultRequest returns a go-kit DecodeRequestFunc suitable for
// decoding mpesa B2CResult requests.
func DecodeB2CResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeB2CResultRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeC2BValidationResponse returns a go-kit EncodeResponseFunc suitable for
// encoding mpesa C2BValidation responses.
func EncodeC2BValidationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeC2BValidationResponse(encoder)
}

// DecodeC2BValidationRequest returns a go-kit DecodeRequestFunc suitable for
// decoding mpesa C2BValidation requests.
func DecodeC2BValidationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeC2BValidationRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeC2BConfirmationResponse returns a go-kit EncodeResponseFunc suitable
// for encoding mpesa C2BConfirmation responses.
func EncodeC2BConfirmationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeC2BConfirmationResponse(encoder)
}

// DecodeC2BConfirmationRequest returns a go-kit DecodeRequestFunc suitable for
// decoding mpesa C2BConfirmation requests.
func DecodeC2BConfirmationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeC2BConfirmationRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}
