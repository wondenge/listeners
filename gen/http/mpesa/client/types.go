// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	mpesa "github.com/wondenge/listeners/gen/mpesa"
)

// AccountBalanceTimeoutRequestBody is the type of the "mpesa" service
// "AccountBalanceTimeout" endpoint HTTP request body.
type AccountBalanceTimeoutRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// AccountBalanceResultRequestBody is the type of the "mpesa" service
// "AccountBalanceResult" endpoint HTTP request body.
type AccountBalanceResultRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// TransactionStatusTimeoutRequestBody is the type of the "mpesa" service
// "TransactionStatusTimeout" endpoint HTTP request body.
type TransactionStatusTimeoutRequestBody struct {
	ResultParameters *string `form:"ResultParameters,omitempty" json:"ResultParameters,omitempty" xml:"ResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// TransactionStatusResultRequestBody is the type of the "mpesa" service
// "TransactionStatusResult" endpoint HTTP request body.
type TransactionStatusResultRequestBody struct {
	ResultParameters *string `form:"ResultParameters,omitempty" json:"ResultParameters,omitempty" xml:"ResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// ReversalTimeoutRequestBody is the type of the "mpesa" service
// "ReversalTimeout" endpoint HTTP request body.
type ReversalTimeoutRequestBody struct {
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// ReversalResultRequestBody is the type of the "mpesa" service
// "ReversalResult" endpoint HTTP request body.
type ReversalResultRequestBody struct {
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// B2CTimeoutRequestBody is the type of the "mpesa" service "B2CTimeout"
// endpoint HTTP request body.
type B2CTimeoutRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// B2CResultRequestBody is the type of the "mpesa" service "B2CResult" endpoint
// HTTP request body.
type B2CResultRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// C2BValidationRequestBody is the type of the "mpesa" service "C2BValidation"
// endpoint HTTP request body.
type C2BValidationRequestBody struct {
	// Transaction type specified during the payment request.
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Unique M-Pesa transaction ID for every payment request
	TransID *string `form:"TransID,omitempty" json:"TransID,omitempty" xml:"TransID,omitempty"`
	// Timestamp of the transaction
	TransTime *string `form:"TransTime,omitempty" json:"TransTime,omitempty" xml:"TransTime,omitempty"`
	// The Amount transacted normally a numeric value
	TransAmount *int `form:"TransAmount,omitempty" json:"TransAmount,omitempty" xml:"TransAmount,omitempty"`
	// Organizations shortcode (Paybill or Buygoods)
	BusinessShortCode *int `form:"BusinessShortCode,omitempty" json:"BusinessShortCode,omitempty" xml:"BusinessShortCode,omitempty"`
	// Account number for which the customer is making the payment
	BillRefNumber *string `form:"BillRefNumber,omitempty" json:"BillRefNumber,omitempty" xml:"BillRefNumber,omitempty"`
	InvoiceNumber *string `form:"InvoiceNumber,omitempty" json:"InvoiceNumber,omitempty" xml:"InvoiceNumber,omitempty"`
	// Current utility account balance of the payment receiving organization
	// shortcode
	OrgAccountBalance *int    `form:"OrgAccountBalance,omitempty" json:"OrgAccountBalance,omitempty" xml:"OrgAccountBalance,omitempty"`
	ThirdPartyTransID *string `form:"ThirdPartyTransID,omitempty" json:"ThirdPartyTransID,omitempty" xml:"ThirdPartyTransID,omitempty"`
	// Mobile number of the customer making the payment.
	MSISDN *int `form:"MSISDN,omitempty" json:"MSISDN,omitempty" xml:"MSISDN,omitempty"`
	// First Name of the customer making the payment.
	FirstName *string `form:"FirstName,omitempty" json:"FirstName,omitempty" xml:"FirstName,omitempty"`
	// Middle Name of the customer making the payment.
	MiddleName *string `form:"MiddleName,omitempty" json:"MiddleName,omitempty" xml:"MiddleName,omitempty"`
	// Last Name of the customer making payment.
	LastName *string `form:"LastName,omitempty" json:"LastName,omitempty" xml:"LastName,omitempty"`
}

// C2BConfirmationRequestBody is the type of the "mpesa" service
// "C2BConfirmation" endpoint HTTP request body.
type C2BConfirmationRequestBody struct {
	// Transaction type specified during the payment request.
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Unique M-Pesa transaction ID for every payment request
	TransID *string `form:"TransID,omitempty" json:"TransID,omitempty" xml:"TransID,omitempty"`
	// Timestamp of the transaction
	TransTime *string `form:"TransTime,omitempty" json:"TransTime,omitempty" xml:"TransTime,omitempty"`
	// The Amount transacted normally a numeric value
	TransAmount *int `form:"TransAmount,omitempty" json:"TransAmount,omitempty" xml:"TransAmount,omitempty"`
	// Organizations shortcode (Paybill or Buygoods)
	BusinessShortCode *int `form:"BusinessShortCode,omitempty" json:"BusinessShortCode,omitempty" xml:"BusinessShortCode,omitempty"`
	// Account number for which the customer is making the payment
	BillRefNumber *string `form:"BillRefNumber,omitempty" json:"BillRefNumber,omitempty" xml:"BillRefNumber,omitempty"`
	InvoiceNumber *string `form:"InvoiceNumber,omitempty" json:"InvoiceNumber,omitempty" xml:"InvoiceNumber,omitempty"`
	// Current utility account balance of the payment receiving organization
	// shortcode
	OrgAccountBalance *int    `form:"OrgAccountBalance,omitempty" json:"OrgAccountBalance,omitempty" xml:"OrgAccountBalance,omitempty"`
	ThirdPartyTransID *string `form:"ThirdPartyTransID,omitempty" json:"ThirdPartyTransID,omitempty" xml:"ThirdPartyTransID,omitempty"`
	// Mobile number of the customer making the payment.
	MSISDN *int `form:"MSISDN,omitempty" json:"MSISDN,omitempty" xml:"MSISDN,omitempty"`
	// First Name of the customer making the payment.
	FirstName *string `form:"FirstName,omitempty" json:"FirstName,omitempty" xml:"FirstName,omitempty"`
	// Middle Name of the customer making the payment.
	MiddleName *string `form:"MiddleName,omitempty" json:"MiddleName,omitempty" xml:"MiddleName,omitempty"`
	// Last Name of the customer making payment.
	LastName *string `form:"LastName,omitempty" json:"LastName,omitempty" xml:"LastName,omitempty"`
}

// NewAccountBalanceTimeoutRequestBody builds the HTTP request body from the
// payload of the "AccountBalanceTimeout" endpoint of the "mpesa" service.
func NewAccountBalanceTimeoutRequestBody(p *mpesa.AccountBalanceResult) *AccountBalanceTimeoutRequestBody {
	body := &AccountBalanceTimeoutRequestBody{
		MpesaResultParameters:    p.MpesaResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewAccountBalanceResultRequestBody builds the HTTP request body from the
// payload of the "AccountBalanceResult" endpoint of the "mpesa" service.
func NewAccountBalanceResultRequestBody(p *mpesa.AccountBalanceResult) *AccountBalanceResultRequestBody {
	body := &AccountBalanceResultRequestBody{
		MpesaResultParameters:    p.MpesaResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewTransactionStatusTimeoutRequestBody builds the HTTP request body from the
// payload of the "TransactionStatusTimeout" endpoint of the "mpesa" service.
func NewTransactionStatusTimeoutRequestBody(p *mpesa.TransactionStatusResult) *TransactionStatusTimeoutRequestBody {
	body := &TransactionStatusTimeoutRequestBody{
		ResultParameters:         p.ResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewTransactionStatusResultRequestBody builds the HTTP request body from the
// payload of the "TransactionStatusResult" endpoint of the "mpesa" service.
func NewTransactionStatusResultRequestBody(p *mpesa.TransactionStatusResult) *TransactionStatusResultRequestBody {
	body := &TransactionStatusResultRequestBody{
		ResultParameters:         p.ResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewReversalTimeoutRequestBody builds the HTTP request body from the payload
// of the "ReversalTimeout" endpoint of the "mpesa" service.
func NewReversalTimeoutRequestBody(p *mpesa.ReversalResult) *ReversalTimeoutRequestBody {
	body := &ReversalTimeoutRequestBody{
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewReversalResultRequestBody builds the HTTP request body from the payload
// of the "ReversalResult" endpoint of the "mpesa" service.
func NewReversalResultRequestBody(p *mpesa.ReversalResult) *ReversalResultRequestBody {
	body := &ReversalResultRequestBody{
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewB2CTimeoutRequestBody builds the HTTP request body from the payload of
// the "B2CTimeout" endpoint of the "mpesa" service.
func NewB2CTimeoutRequestBody(p *mpesa.B2CPaymentResult) *B2CTimeoutRequestBody {
	body := &B2CTimeoutRequestBody{
		MpesaResultParameters:    p.MpesaResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewB2CResultRequestBody builds the HTTP request body from the payload of the
// "B2CResult" endpoint of the "mpesa" service.
func NewB2CResultRequestBody(p *mpesa.B2CPaymentResult) *B2CResultRequestBody {
	body := &B2CResultRequestBody{
		MpesaResultParameters:    p.MpesaResultParameters,
		MpesaResultType:          p.MpesaResultType,
		MpesaResultCode:          p.MpesaResultCode,
		MpesaResultDesc:          p.MpesaResultDesc,
		OriginatorConversationID: p.OriginatorConversationID,
		ConversationID:           p.ConversationID,
		TransactionID:            p.TransactionID,
		QueueTimeoutURL:          p.QueueTimeoutURL,
		Occasion:                 p.Occasion,
	}
	return body
}

// NewC2BValidationRequestBody builds the HTTP request body from the payload of
// the "C2BValidation" endpoint of the "mpesa" service.
func NewC2BValidationRequestBody(p *mpesa.ValidationResult) *C2BValidationRequestBody {
	body := &C2BValidationRequestBody{
		TransactionType:   p.TransactionType,
		TransID:           p.TransID,
		TransTime:         p.TransTime,
		TransAmount:       p.TransAmount,
		BusinessShortCode: p.BusinessShortCode,
		BillRefNumber:     p.BillRefNumber,
		InvoiceNumber:     p.InvoiceNumber,
		OrgAccountBalance: p.OrgAccountBalance,
		ThirdPartyTransID: p.ThirdPartyTransID,
		MSISDN:            p.MSISDN,
		FirstName:         p.FirstName,
		MiddleName:        p.MiddleName,
		LastName:          p.LastName,
	}
	return body
}

// NewC2BConfirmationRequestBody builds the HTTP request body from the payload
// of the "C2BConfirmation" endpoint of the "mpesa" service.
func NewC2BConfirmationRequestBody(p *mpesa.ConfirmationResult) *C2BConfirmationRequestBody {
	body := &C2BConfirmationRequestBody{
		TransactionType:   p.TransactionType,
		TransID:           p.TransID,
		TransTime:         p.TransTime,
		TransAmount:       p.TransAmount,
		BusinessShortCode: p.BusinessShortCode,
		BillRefNumber:     p.BillRefNumber,
		InvoiceNumber:     p.InvoiceNumber,
		OrgAccountBalance: p.OrgAccountBalance,
		ThirdPartyTransID: p.ThirdPartyTransID,
		MSISDN:            p.MSISDN,
		FirstName:         p.FirstName,
		MiddleName:        p.MiddleName,
		LastName:          p.LastName,
	}
	return body
}
