// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	"encoding/json"
	"fmt"

	mpesa "github.com/wondenge/listeners/gen/mpesa"
)

// BuildAccountBalanceTimeoutPayload builds the payload for the mpesa
// AccountBalanceTimeout endpoint from CLI flags.
func BuildAccountBalanceTimeoutPayload(mpesaAccountBalanceTimeoutBody string) (*mpesa.AccountBalanceResult, error) {
	var err error
	var body AccountBalanceTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaAccountBalanceTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultParameters\": \"Atque omnis at consequatur corporis fuga.\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.AccountBalanceResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildAccountBalanceResultEndpointPayload builds the payload for the mpesa
// AccountBalanceResult endpoint from CLI flags.
func BuildAccountBalanceResultEndpointPayload(mpesaAccountBalanceResultBody string) (*mpesa.AccountBalanceResult, error) {
	var err error
	var body AccountBalanceResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaAccountBalanceResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultParameters\": \"Rem ducimus enim qui aliquid.\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.AccountBalanceResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildTransactionStatusTimeoutPayload builds the payload for the mpesa
// TransactionStatusTimeout endpoint from CLI flags.
func BuildTransactionStatusTimeoutPayload(mpesaTransactionStatusTimeoutBody string) (*mpesa.TransactionStatusResult, error) {
	var err error
	var body TransactionStatusTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaTransactionStatusTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"ResultParameters\": \"Vel qui dolorem.\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.TransactionStatusResult{
		ResultParameters:         body.ResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildTransactionStatusResultEndpointPayload builds the payload for the mpesa
// TransactionStatusResult endpoint from CLI flags.
func BuildTransactionStatusResultEndpointPayload(mpesaTransactionStatusResultBody string) (*mpesa.TransactionStatusResult, error) {
	var err error
	var body TransactionStatusResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaTransactionStatusResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"ResultParameters\": \"Iusto cum voluptates quo qui dolor eligendi.\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.TransactionStatusResult{
		ResultParameters:         body.ResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildReversalTimeoutPayload builds the payload for the mpesa ReversalTimeout
// endpoint from CLI flags.
func BuildReversalTimeoutPayload(mpesaReversalTimeoutBody string) (*mpesa.ReversalResult, error) {
	var err error
	var body ReversalTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaReversalTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.ReversalResult{
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildReversalResultEndpointPayload builds the payload for the mpesa
// ReversalResult endpoint from CLI flags.
func BuildReversalResultEndpointPayload(mpesaReversalResultBody string) (*mpesa.ReversalResult, error) {
	var err error
	var body ReversalResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaReversalResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.ReversalResult{
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildB2CTimeoutPayload builds the payload for the mpesa B2CTimeout endpoint
// from CLI flags.
func BuildB2CTimeoutPayload(mpesaB2CTimeoutBody string) (*mpesa.B2CPaymentResult, error) {
	var err error
	var body B2CTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaB2CTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultParameters\": \"Ut voluptatem dolores qui reprehenderit.\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.B2CPaymentResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildB2CResultPayload builds the payload for the mpesa B2CResult endpoint
// from CLI flags.
func BuildB2CResultPayload(mpesaB2CResultBody string) (*mpesa.B2CPaymentResult, error) {
	var err error
	var body B2CResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaB2CResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ConversationId\": \"236543-276372-2\",\n      \"MpesaResultCode\": 0,\n      \"MpesaResultDesc\": \"Initiator information is invalid\",\n      \"MpesaResultParameters\": \"Expedita qui eius dolorem voluptatem ullam delectus.\",\n      \"MpesaResultType\": 0,\n      \"Occasion\": \"Occasion\",\n      \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n      \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\",\n      \"TransactionID\": \"LHG31AA5TX\"\n   }'")
		}
	}
	v := &mpesa.B2CPaymentResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v, nil
}

// BuildC2BValidationPayload builds the payload for the mpesa C2BValidation
// endpoint from CLI flags.
func BuildC2BValidationPayload(mpesaC2BValidationBody string) (*mpesa.ValidationResult, error) {
	var err error
	var body C2BValidationRequestBody
	{
		err = json.Unmarshal([]byte(mpesaC2BValidationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"BillRefNumber\": \"fcj\",\n      \"BusinessShortCode\": 654321,\n      \"FirstName\": \"John\",\n      \"InvoiceNumber\": \"Rem totam reprehenderit itaque eos.\",\n      \"LastName\": \"Jane\",\n      \"MSISDN\": 3458945962503183300,\n      \"MiddleName\": \"Doe\",\n      \"OrgAccountBalance\": 30671,\n      \"ThirdPartyTransID\": \"Non fugit ullam laborum vero.\",\n      \"TransAmount\": 100,\n      \"TransID\": \"LHG31AA5TX\",\n      \"TransTime\": \"20180713154301\",\n      \"TransactionType\": \"Pay Bill\"\n   }'")
		}
	}
	v := &mpesa.ValidationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v, nil
}

// BuildC2BConfirmationPayload builds the payload for the mpesa C2BConfirmation
// endpoint from CLI flags.
func BuildC2BConfirmationPayload(mpesaC2BConfirmationBody string) (*mpesa.ConfirmationResult, error) {
	var err error
	var body C2BConfirmationRequestBody
	{
		err = json.Unmarshal([]byte(mpesaC2BConfirmationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"BillRefNumber\": \"knp\",\n      \"BusinessShortCode\": 654321,\n      \"FirstName\": \"John\",\n      \"InvoiceNumber\": \"Nisi blanditiis alias mollitia iure quos omnis.\",\n      \"LastName\": \"Jane\",\n      \"MSISDN\": 2582828271847030372,\n      \"MiddleName\": \"Doe\",\n      \"OrgAccountBalance\": 30671,\n      \"ThirdPartyTransID\": \"Id iste.\",\n      \"TransAmount\": 100,\n      \"TransID\": \"LHG31AA5TX\",\n      \"TransTime\": \"20180713154301\",\n      \"TransactionType\": \"Buy Goods\"\n   }'")
		}
	}
	v := &mpesa.ConfirmationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v, nil
}
