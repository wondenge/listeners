// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package client

import (
	"encoding/json"
	"fmt"

	mpesa "github.com/wondenge/listeners/gen/mpesa"
)

// BuildAccountBalanceTimeoutPayload builds the payload for the mpesa
// AccountBalanceTimeout endpoint from CLI flags.
func BuildAccountBalanceTimeoutPayload(mpesaAccountBalanceTimeoutBody string) (*mpesa.AccountBalanceResult, error) {
	var err error
	var body AccountBalanceTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaAccountBalanceTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultParameters\": {\n            \"ResultParameter\": [\n               {\n                  \"AccountBalance\": \"Working Account|KES|46713.00|46713.00|0.00|0.00\\u0026Float Account|KES|0.00|0.00|0.00|0.00\\u0026Utility Account|KES|49217.00|49217.00|0.00|0.00\\u0026Charges Paid Account|KES|-220.00|-220.00|0.00|0.00\\u0026Organization Settlement Account|KES|0.00|0.00|0.00|0.00\",\n                  \"BOCompletedTime\": \"20170728095642\"\n               },\n               {\n                  \"AccountBalance\": \"Working Account|KES|46713.00|46713.00|0.00|0.00\\u0026Float Account|KES|0.00|0.00|0.00|0.00\\u0026Utility Account|KES|49217.00|49217.00|0.00|0.00\\u0026Charges Paid Account|KES|-220.00|-220.00|0.00|0.00\\u0026Organization Settlement Account|KES|0.00|0.00|0.00|0.00\",\n                  \"BOCompletedTime\": \"20170728095642\"\n               }\n            ]\n         },\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.AccountBalanceResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID    *string
			ResultParameters *struct {
				ResultParameter []*AccountBalanceParameters
			}
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ResultParameters != nil {
			v.Result.ResultParameters = &struct {
				ResultParameter []*AccountBalanceParameters
			}{}
			if body.Result.ResultParameters.ResultParameter != nil {
				v.Result.ResultParameters.ResultParameter = make([]*mpesa.AccountBalanceParameters, len(body.Result.ResultParameters.ResultParameter))
				for i, val := range body.Result.ResultParameters.ResultParameter {
					v.Result.ResultParameters.ResultParameter[i] = marshalAccountBalanceParametersRequestBodyToMpesaAccountBalanceParameters(val)
				}
			}
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildAccountBalanceResultEndpointPayload builds the payload for the mpesa
// AccountBalanceResult endpoint from CLI flags.
func BuildAccountBalanceResultEndpointPayload(mpesaAccountBalanceResultBody string) (*mpesa.AccountBalanceResult, error) {
	var err error
	var body AccountBalanceResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaAccountBalanceResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/abresults/v1/submit\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultParameters\": {\n            \"ResultParameter\": [\n               {\n                  \"AccountBalance\": \"Working Account|KES|46713.00|46713.00|0.00|0.00\\u0026Float Account|KES|0.00|0.00|0.00|0.00\\u0026Utility Account|KES|49217.00|49217.00|0.00|0.00\\u0026Charges Paid Account|KES|-220.00|-220.00|0.00|0.00\\u0026Organization Settlement Account|KES|0.00|0.00|0.00|0.00\",\n                  \"BOCompletedTime\": \"20170728095642\"\n               },\n               {\n                  \"AccountBalance\": \"Working Account|KES|46713.00|46713.00|0.00|0.00\\u0026Float Account|KES|0.00|0.00|0.00|0.00\\u0026Utility Account|KES|49217.00|49217.00|0.00|0.00\\u0026Charges Paid Account|KES|-220.00|-220.00|0.00|0.00\\u0026Organization Settlement Account|KES|0.00|0.00|0.00|0.00\",\n                  \"BOCompletedTime\": \"20170728095642\"\n               }\n            ]\n         },\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.AccountBalanceResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID    *string
			ResultParameters *struct {
				ResultParameter []*AccountBalanceParameters
			}
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ResultParameters != nil {
			v.Result.ResultParameters = &struct {
				ResultParameter []*AccountBalanceParameters
			}{}
			if body.Result.ResultParameters.ResultParameter != nil {
				v.Result.ResultParameters.ResultParameter = make([]*mpesa.AccountBalanceParameters, len(body.Result.ResultParameters.ResultParameter))
				for i, val := range body.Result.ResultParameters.ResultParameter {
					v.Result.ResultParameters.ResultParameter[i] = marshalAccountBalanceParametersRequestBodyToMpesaAccountBalanceParameters(val)
				}
			}
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildTransactionStatusTimeoutPayload builds the payload for the mpesa
// TransactionStatusTimeout endpoint from CLI flags.
func BuildTransactionStatusTimeoutPayload(mpesaTransactionStatusTimeoutBody string) (*mpesa.TransactionStatusResult, error) {
	var err error
	var body TransactionStatusTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaTransactionStatusTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"Occasion\": \"Occasion\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultParameters\": {\n            \"ResultParameter\": [\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               },\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               },\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               }\n            ]\n         },\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.TransactionStatusResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID    *string
			ResultParameters *struct {
				ResultParameter []*TransactionStatusResultParameter
			}
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ResultParameters != nil {
			v.Result.ResultParameters = &struct {
				ResultParameter []*TransactionStatusResultParameter
			}{}
			if body.Result.ResultParameters.ResultParameter != nil {
				v.Result.ResultParameters.ResultParameter = make([]*mpesa.TransactionStatusResultParameter, len(body.Result.ResultParameters.ResultParameter))
				for i, val := range body.Result.ResultParameters.ResultParameter {
					v.Result.ResultParameters.ResultParameter[i] = marshalTransactionStatusResultParameterRequestBodyToMpesaTransactionStatusResultParameter(val)
				}
			}
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildTransactionStatusResultEndpointPayload builds the payload for the mpesa
// TransactionStatusResult endpoint from CLI flags.
func BuildTransactionStatusResultEndpointPayload(mpesaTransactionStatusResultBody string) (*mpesa.TransactionStatusResult, error) {
	var err error
	var body TransactionStatusResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaTransactionStatusResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"Occasion\": \"Occasion\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultParameters\": {\n            \"ResultParameter\": [\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               },\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               },\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               },\n               {\n                  \"Amount\": 10,\n                  \"ConversationID\": \"AG_20170727_00004492b1b6d0078fbe\",\n                  \"CreditPartyName\": \"254708374149 - John Doe\",\n                  \"DebitAccountType\": \"Utility Account\",\n                  \"DebitPartyCharges\": \"Fee For B2C Payment|KES|33.00\",\n                  \"DebitPartyName\": \"600134 - Safaricom157\",\n                  \"FinalisedTime\": \"20170727101415\",\n                  \"InitiatedTime\": \"20170727101415\",\n                  \"Originator Conversation ID\": \"19455-773836-1\",\n                  \"ReasonType\": \"Salary Payment via API\",\n                  \"ReceiptNo\": \"LGR919G2AV\",\n                  \"TransactionReason\": \"Transaction Reason\",\n                  \"TransactionStatus\": \"Completed\"\n               }\n            ]\n         },\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.TransactionStatusResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID    *string
			ResultParameters *struct {
				ResultParameter []*TransactionStatusResultParameter
			}
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ResultParameters != nil {
			v.Result.ResultParameters = &struct {
				ResultParameter []*TransactionStatusResultParameter
			}{}
			if body.Result.ResultParameters.ResultParameter != nil {
				v.Result.ResultParameters.ResultParameter = make([]*mpesa.TransactionStatusResultParameter, len(body.Result.ResultParameters.ResultParameter))
				for i, val := range body.Result.ResultParameters.ResultParameter {
					v.Result.ResultParameters.ResultParameter[i] = marshalTransactionStatusResultParameterRequestBodyToMpesaTransactionStatusResultParameter(val)
				}
			}
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildReversalTimeoutPayload builds the payload for the mpesa ReversalTimeout
// endpoint from CLI flags.
func BuildReversalTimeoutPayload(mpesaReversalTimeoutBody string) (*mpesa.ReversalResult, error) {
	var err error
	var body ReversalTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaReversalTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/reversalresults/v1/submit\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.ReversalResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID *string
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildReversalResultEndpointPayload builds the payload for the mpesa
// ReversalResult endpoint from CLI flags.
func BuildReversalResultEndpointPayload(mpesaReversalResultBody string) (*mpesa.ReversalResult, error) {
	var err error
	var body ReversalResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaReversalResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ReferenceData\": {\n            \"ReferenceItem\": {\n               \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/reversalresults/v1/submit\"\n            }\n         },\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      }\n   }'")
		}
	}
	v := &mpesa.ReversalResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID *string
			ReferenceData *struct {
				ReferenceItem map[string]string
			}
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
		if body.Result.ReferenceData != nil {
			v.Result.ReferenceData = &struct {
				ReferenceItem map[string]string
			}{}
			if body.Result.ReferenceData.ReferenceItem != nil {
				v.Result.ReferenceData.ReferenceItem = make(map[string]string, len(body.Result.ReferenceData.ReferenceItem))
				for key, val := range body.Result.ReferenceData.ReferenceItem {
					tk := key
					tv := val
					v.Result.ReferenceData.ReferenceItem[tk] = tv
				}
			}
		}
	}

	return v, nil
}

// BuildB2CTimeoutPayload builds the payload for the mpesa B2CTimeout endpoint
// from CLI flags.
func BuildB2CTimeoutPayload(mpesaB2CTimeoutBody string) (*mpesa.B2CPaymentResult, error) {
	var err error
	var body B2CTimeoutRequestBody
	{
		err = json.Unmarshal([]byte(mpesaB2CTimeoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ReferenceData\": {\n         \"ReferenceItem\": {\n            \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/b2cresults/v1/submit\"\n         }\n      },\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      },\n      \"ResultParameters\": {\n         \"ResultParameter\": [\n            {\n               \"B2CChargesPaidAccountAvailableFunds\": 236543.9,\n               \"B2CRecipientIsRegisteredCustomer\": \"Y\",\n               \"B2CUtilityAccountAvailableFunds\": 23654.5,\n               \"B2CWorkingAccountAvailableFunds\": 2000,\n               \"ReceiverPartyPublicName\": \"254722000000 - Safaricom PLC\",\n               \"TransactionAmount\": 8000,\n               \"TransactionCompletedDateTime\": \"17.07.2017 10:54:57\",\n               \"TransactionReceipt\": \"LGH3197RIB\"\n            },\n            {\n               \"B2CChargesPaidAccountAvailableFunds\": 236543.9,\n               \"B2CRecipientIsRegisteredCustomer\": \"Y\",\n               \"B2CUtilityAccountAvailableFunds\": 23654.5,\n               \"B2CWorkingAccountAvailableFunds\": 2000,\n               \"ReceiverPartyPublicName\": \"254722000000 - Safaricom PLC\",\n               \"TransactionAmount\": 8000,\n               \"TransactionCompletedDateTime\": \"17.07.2017 10:54:57\",\n               \"TransactionReceipt\": \"LGH3197RIB\"\n            }\n         ]\n      }\n   }'")
		}
	}
	v := &mpesa.B2CPaymentResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID *string
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
	}
	if body.ResultParameters != nil {
		v.ResultParameters = &struct {
			ResultParameter []*B2CResultParameters
		}{}
		if body.ResultParameters.ResultParameter != nil {
			v.ResultParameters.ResultParameter = make([]*mpesa.B2CResultParameters, len(body.ResultParameters.ResultParameter))
			for i, val := range body.ResultParameters.ResultParameter {
				v.ResultParameters.ResultParameter[i] = marshalB2CResultParametersRequestBodyToMpesaB2CResultParameters(val)
			}
		}
	}
	if body.ReferenceData != nil {
		v.ReferenceData = &struct {
			ReferenceItem map[string]string
		}{}
		if body.ReferenceData.ReferenceItem != nil {
			v.ReferenceData.ReferenceItem = make(map[string]string, len(body.ReferenceData.ReferenceItem))
			for key, val := range body.ReferenceData.ReferenceItem {
				tk := key
				tv := val
				v.ReferenceData.ReferenceItem[tk] = tv
			}
		}
	}

	return v, nil
}

// BuildB2CResultPayload builds the payload for the mpesa B2CResult endpoint
// from CLI flags.
func BuildB2CResultPayload(mpesaB2CResultBody string) (*mpesa.B2CPaymentResult, error) {
	var err error
	var body B2CResultRequestBody
	{
		err = json.Unmarshal([]byte(mpesaB2CResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"ReferenceData\": {\n         \"ReferenceItem\": {\n            \"QueueTimeoutURL\": \"https://internalsandbox.safaricom.co.ke/mpesa/b2cresults/v1/submit\"\n         }\n      },\n      \"Result\": {\n         \"ConversationId\": \"236543-276372-2\",\n         \"OriginatorConversationId\": \"AG_2376487236_126732989KJHJKH\",\n         \"ResultCode\": 0,\n         \"ResultDesc\": \"Initiator information is invalid\",\n         \"ResultType\": 0,\n         \"TransactionID\": \"LHG31AA5TX\"\n      },\n      \"ResultParameters\": {\n         \"ResultParameter\": [\n            {\n               \"B2CChargesPaidAccountAvailableFunds\": 236543.9,\n               \"B2CRecipientIsRegisteredCustomer\": \"Y\",\n               \"B2CUtilityAccountAvailableFunds\": 23654.5,\n               \"B2CWorkingAccountAvailableFunds\": 2000,\n               \"ReceiverPartyPublicName\": \"254722000000 - Safaricom PLC\",\n               \"TransactionAmount\": 8000,\n               \"TransactionCompletedDateTime\": \"17.07.2017 10:54:57\",\n               \"TransactionReceipt\": \"LGH3197RIB\"\n            },\n            {\n               \"B2CChargesPaidAccountAvailableFunds\": 236543.9,\n               \"B2CRecipientIsRegisteredCustomer\": \"Y\",\n               \"B2CUtilityAccountAvailableFunds\": 23654.5,\n               \"B2CWorkingAccountAvailableFunds\": 2000,\n               \"ReceiverPartyPublicName\": \"254722000000 - Safaricom PLC\",\n               \"TransactionAmount\": 8000,\n               \"TransactionCompletedDateTime\": \"17.07.2017 10:54:57\",\n               \"TransactionReceipt\": \"LGH3197RIB\"\n            },\n            {\n               \"B2CChargesPaidAccountAvailableFunds\": 236543.9,\n               \"B2CRecipientIsRegisteredCustomer\": \"Y\",\n               \"B2CUtilityAccountAvailableFunds\": 23654.5,\n               \"B2CWorkingAccountAvailableFunds\": 2000,\n               \"ReceiverPartyPublicName\": \"254722000000 - Safaricom PLC\",\n               \"TransactionAmount\": 8000,\n               \"TransactionCompletedDateTime\": \"17.07.2017 10:54:57\",\n               \"TransactionReceipt\": \"LGH3197RIB\"\n            }\n         ]\n      }\n   }'")
		}
	}
	v := &mpesa.B2CPaymentResult{}
	if body.Result != nil {
		v.Result = &struct {
			// Status code indicating whether transaction was already sent to your listener
			ResultType *int
			// Numeric status code indicating the status of the transaction processing
			ResultCode *int
			// Message from the API that gives the status of the request
			ResultDesc *string
			// Unique identifier for the transaction request.
			OriginatorConversationID *string
			// Unique identifier for the transaction request.
			ConversationID *string
			// Unique M-PESA transaction ID for every payment request.
			TransactionID *string
		}{
			ResultType:               body.Result.ResultType,
			ResultCode:               body.Result.ResultCode,
			ResultDesc:               body.Result.ResultDesc,
			OriginatorConversationID: body.Result.OriginatorConversationID,
			ConversationID:           body.Result.ConversationID,
			TransactionID:            body.Result.TransactionID,
		}
	}
	if body.ResultParameters != nil {
		v.ResultParameters = &struct {
			ResultParameter []*B2CResultParameters
		}{}
		if body.ResultParameters.ResultParameter != nil {
			v.ResultParameters.ResultParameter = make([]*mpesa.B2CResultParameters, len(body.ResultParameters.ResultParameter))
			for i, val := range body.ResultParameters.ResultParameter {
				v.ResultParameters.ResultParameter[i] = marshalB2CResultParametersRequestBodyToMpesaB2CResultParameters(val)
			}
		}
	}
	if body.ReferenceData != nil {
		v.ReferenceData = &struct {
			ReferenceItem map[string]string
		}{}
		if body.ReferenceData.ReferenceItem != nil {
			v.ReferenceData.ReferenceItem = make(map[string]string, len(body.ReferenceData.ReferenceItem))
			for key, val := range body.ReferenceData.ReferenceItem {
				tk := key
				tv := val
				v.ReferenceData.ReferenceItem[tk] = tv
			}
		}
	}

	return v, nil
}

// BuildC2BValidationPayload builds the payload for the mpesa C2BValidation
// endpoint from CLI flags.
func BuildC2BValidationPayload(mpesaC2BValidationBody string) (*mpesa.ValidationResult, error) {
	var err error
	var body C2BValidationRequestBody
	{
		err = json.Unmarshal([]byte(mpesaC2BValidationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"BillRefNumber\": \"ele\",\n      \"BusinessShortCode\": 654321,\n      \"FirstName\": \"John\",\n      \"InvoiceNumber\": \"Animi et.\",\n      \"LastName\": \"Jane\",\n      \"MSISDN\": 7807928622680112375,\n      \"MiddleName\": \"Doe\",\n      \"OrgAccountBalance\": 30671,\n      \"ThirdPartyTransID\": \"Ratione minima rerum voluptatem hic molestiae expedita.\",\n      \"TransAmount\": 100,\n      \"TransID\": \"LHG31AA5TX\",\n      \"TransTime\": \"20180713154301\",\n      \"TransactionType\": \"Buy Goods\"\n   }'")
		}
	}
	v := &mpesa.ValidationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v, nil
}

// BuildC2BConfirmationPayload builds the payload for the mpesa C2BConfirmation
// endpoint from CLI flags.
func BuildC2BConfirmationPayload(mpesaC2BConfirmationBody string) (*mpesa.ConfirmationResult, error) {
	var err error
	var body C2BConfirmationRequestBody
	{
		err = json.Unmarshal([]byte(mpesaC2BConfirmationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"BillRefNumber\": \"3wz\",\n      \"BusinessShortCode\": 654321,\n      \"FirstName\": \"John\",\n      \"InvoiceNumber\": \"Ut voluptatem dolores qui reprehenderit.\",\n      \"LastName\": \"Jane\",\n      \"MSISDN\": 3226968445935365337,\n      \"MiddleName\": \"Doe\",\n      \"OrgAccountBalance\": 30671,\n      \"ThirdPartyTransID\": \"Animi qui aliquam occaecati expedita at.\",\n      \"TransAmount\": 100,\n      \"TransID\": \"LHG31AA5TX\",\n      \"TransTime\": \"20180713154301\",\n      \"TransactionType\": \"Pay Bill\"\n   }'")
		}
	}
	v := &mpesa.ConfirmationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v, nil
}
