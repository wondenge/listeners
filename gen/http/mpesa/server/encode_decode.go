// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"context"
	"io"
	"net/http"

	mpesa "github.com/wondenge/listeners/gen/mpesa"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAccountBalanceTimeoutResponse returns an encoder for responses
// returned by the mpesa AccountBalanceTimeout endpoint.
func EncodeAccountBalanceTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAccountBalanceTimeoutRequest returns a decoder for requests sent to
// the mpesa AccountBalanceTimeout endpoint.
func DecodeAccountBalanceTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AccountBalanceTimeoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAccountBalanceTimeoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAccountBalanceTimeoutAccountBalanceResult(&body)

		return payload, nil
	}
}

// EncodeAccountBalanceResultEndpointResponse returns an encoder for responses
// returned by the mpesa AccountBalanceResult endpoint.
func EncodeAccountBalanceResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAccountBalanceResultEndpointRequest returns a decoder for requests
// sent to the mpesa AccountBalanceResult endpoint.
func DecodeAccountBalanceResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AccountBalanceResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAccountBalanceResultRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAccountBalanceResult(&body)

		return payload, nil
	}
}

// EncodeTransactionStatusTimeoutResponse returns an encoder for responses
// returned by the mpesa TransactionStatusTimeout endpoint.
func EncodeTransactionStatusTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTransactionStatusTimeoutRequest returns a decoder for requests sent to
// the mpesa TransactionStatusTimeout endpoint.
func DecodeTransactionStatusTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TransactionStatusTimeoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTransactionStatusTimeoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTransactionStatusTimeoutTransactionStatusResult(&body)

		return payload, nil
	}
}

// EncodeTransactionStatusResultEndpointResponse returns an encoder for
// responses returned by the mpesa TransactionStatusResult endpoint.
func EncodeTransactionStatusResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTransactionStatusResultEndpointRequest returns a decoder for requests
// sent to the mpesa TransactionStatusResult endpoint.
func DecodeTransactionStatusResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TransactionStatusResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTransactionStatusResultRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTransactionStatusResult(&body)

		return payload, nil
	}
}

// EncodeReversalTimeoutResponse returns an encoder for responses returned by
// the mpesa ReversalTimeout endpoint.
func EncodeReversalTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReversalTimeoutRequest returns a decoder for requests sent to the
// mpesa ReversalTimeout endpoint.
func DecodeReversalTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ReversalTimeoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateReversalTimeoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewReversalTimeoutReversalResult(&body)

		return payload, nil
	}
}

// EncodeReversalResultEndpointResponse returns an encoder for responses
// returned by the mpesa ReversalResult endpoint.
func EncodeReversalResultEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReversalResultEndpointRequest returns a decoder for requests sent to
// the mpesa ReversalResult endpoint.
func DecodeReversalResultEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ReversalResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateReversalResultRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewReversalResult(&body)

		return payload, nil
	}
}

// EncodeB2CTimeoutResponse returns an encoder for responses returned by the
// mpesa B2CTimeout endpoint.
func EncodeB2CTimeoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeB2CTimeoutRequest returns a decoder for requests sent to the mpesa
// B2CTimeout endpoint.
func DecodeB2CTimeoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body B2CTimeoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateB2CTimeoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewB2CTimeoutB2CPaymentResult(&body)

		return payload, nil
	}
}

// EncodeB2CResultResponse returns an encoder for responses returned by the
// mpesa B2CResult endpoint.
func EncodeB2CResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeB2CResultRequest returns a decoder for requests sent to the mpesa
// B2CResult endpoint.
func DecodeB2CResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body B2CResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateB2CResultRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewB2CResultB2CPaymentResult(&body)

		return payload, nil
	}
}

// EncodeC2BValidationResponse returns an encoder for responses returned by the
// mpesa C2BValidation endpoint.
func EncodeC2BValidationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeC2BValidationRequest returns a decoder for requests sent to the mpesa
// C2BValidation endpoint.
func DecodeC2BValidationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body C2BValidationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateC2BValidationRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewC2BValidationValidationResult(&body)

		return payload, nil
	}
}

// EncodeC2BConfirmationResponse returns an encoder for responses returned by
// the mpesa C2BConfirmation endpoint.
func EncodeC2BConfirmationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeC2BConfirmationRequest returns a decoder for requests sent to the
// mpesa C2BConfirmation endpoint.
func DecodeC2BConfirmationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body C2BConfirmationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateC2BConfirmationRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewC2BConfirmationConfirmationResult(&body)

		return payload, nil
	}
}

// unmarshalAccountBalanceParametersRequestBodyToMpesaAccountBalanceParameters
// builds a value of type *mpesa.AccountBalanceParameters from a value of type
// *AccountBalanceParametersRequestBody.
func unmarshalAccountBalanceParametersRequestBodyToMpesaAccountBalanceParameters(v *AccountBalanceParametersRequestBody) *mpesa.AccountBalanceParameters {
	if v == nil {
		return nil
	}
	res := &mpesa.AccountBalanceParameters{
		AccountBalance:  v.AccountBalance,
		BOCompletedTime: v.BOCompletedTime,
	}

	return res
}

// unmarshalTransactionStatusResultParameterRequestBodyToMpesaTransactionStatusResultParameter
// builds a value of type *mpesa.TransactionStatusResultParameter from a value
// of type *TransactionStatusResultParameterRequestBody.
func unmarshalTransactionStatusResultParameterRequestBodyToMpesaTransactionStatusResultParameter(v *TransactionStatusResultParameterRequestBody) *mpesa.TransactionStatusResultParameter {
	if v == nil {
		return nil
	}
	res := &mpesa.TransactionStatusResultParameter{
		ReceiptNo:                v.ReceiptNo,
		ConversationID:           v.ConversationID,
		FinalisedTime:            v.FinalisedTime,
		Amount:                   v.Amount,
		TransactionStatus:        v.TransactionStatus,
		ReasonType:               v.ReasonType,
		TransactionReason:        v.TransactionReason,
		DebitPartyCharges:        v.DebitPartyCharges,
		DebitAccountType:         v.DebitAccountType,
		InitiatedTime:            v.InitiatedTime,
		OriginatorConversationID: v.OriginatorConversationID,
		CreditPartyName:          v.CreditPartyName,
		DebitPartyName:           v.DebitPartyName,
	}

	return res
}

// unmarshalB2CResultParametersRequestBodyToMpesaB2CResultParameters builds a
// value of type *mpesa.B2CResultParameters from a value of type
// *B2CResultParametersRequestBody.
func unmarshalB2CResultParametersRequestBodyToMpesaB2CResultParameters(v *B2CResultParametersRequestBody) *mpesa.B2CResultParameters {
	if v == nil {
		return nil
	}
	res := &mpesa.B2CResultParameters{
		TransactionReceipt:                  v.TransactionReceipt,
		TransactionAmount:                   v.TransactionAmount,
		B2CWorkingAccountAvailableFunds:     v.B2CWorkingAccountAvailableFunds,
		B2CUtilityAccountAvailableFunds:     v.B2CUtilityAccountAvailableFunds,
		TransactionCompletedDateTime:        v.TransactionCompletedDateTime,
		ReceiverPartyPublicName:             v.ReceiverPartyPublicName,
		B2CChargesPaidAccountAvailableFunds: v.B2CChargesPaidAccountAvailableFunds,
		B2CRecipientIsRegisteredCustomer:    v.B2CRecipientIsRegisteredCustomer,
	}

	return res
}
