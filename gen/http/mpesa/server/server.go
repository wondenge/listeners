// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP server
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	mpesa "github.com/wondenge/listeners/gen/mpesa"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the mpesa service endpoint HTTP handlers.
type Server struct {
	Mounts                          []*MountPoint
	AccountBalanceTimeout           http.Handler
	AccountBalanceResultEndpoint    http.Handler
	TransactionStatusTimeout        http.Handler
	TransactionStatusResultEndpoint http.Handler
	ReversalTimeout                 http.Handler
	ReversalResultEndpoint          http.Handler
	B2CTimeout                      http.Handler
	B2CResult                       http.Handler
	C2BValidation                   http.Handler
	C2BConfirmation                 http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the mpesa service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *mpesa.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"AccountBalanceTimeout", "POST", "/mpesa/accountbalance/v1/timeout"},
			{"AccountBalanceResultEndpoint", "POST", "/mpesa/accountbalance/v1/result"},
			{"TransactionStatusTimeout", "POST", "/mpesa/transactionstatus/v1/timeout"},
			{"TransactionStatusResultEndpoint", "POST", "/mpesa/transactionstatus/v1/result"},
			{"ReversalTimeout", "POST", "/mpesa/reversal/v1/timeout"},
			{"ReversalResultEndpoint", "POST", "/mpesa/reversal/v1/result"},
			{"B2CTimeout", "POST", "/mpesa/b2c/v1/timeout"},
			{"B2CResult", "POST", "/mpesa/b2c/v1/result"},
			{"C2BValidation", "POST", "/mpesa/c2b/v1/validation"},
			{"C2BConfirmation", "POST", "/mpesa/c2b/v1/confirmation"},
		},
		AccountBalanceTimeout:           NewAccountBalanceTimeoutHandler(e.AccountBalanceTimeout, mux, decoder, encoder, errhandler, formatter),
		AccountBalanceResultEndpoint:    NewAccountBalanceResultEndpointHandler(e.AccountBalanceResultEndpoint, mux, decoder, encoder, errhandler, formatter),
		TransactionStatusTimeout:        NewTransactionStatusTimeoutHandler(e.TransactionStatusTimeout, mux, decoder, encoder, errhandler, formatter),
		TransactionStatusResultEndpoint: NewTransactionStatusResultEndpointHandler(e.TransactionStatusResultEndpoint, mux, decoder, encoder, errhandler, formatter),
		ReversalTimeout:                 NewReversalTimeoutHandler(e.ReversalTimeout, mux, decoder, encoder, errhandler, formatter),
		ReversalResultEndpoint:          NewReversalResultEndpointHandler(e.ReversalResultEndpoint, mux, decoder, encoder, errhandler, formatter),
		B2CTimeout:                      NewB2CTimeoutHandler(e.B2CTimeout, mux, decoder, encoder, errhandler, formatter),
		B2CResult:                       NewB2CResultHandler(e.B2CResult, mux, decoder, encoder, errhandler, formatter),
		C2BValidation:                   NewC2BValidationHandler(e.C2BValidation, mux, decoder, encoder, errhandler, formatter),
		C2BConfirmation:                 NewC2BConfirmationHandler(e.C2BConfirmation, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "mpesa" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.AccountBalanceTimeout = m(s.AccountBalanceTimeout)
	s.AccountBalanceResultEndpoint = m(s.AccountBalanceResultEndpoint)
	s.TransactionStatusTimeout = m(s.TransactionStatusTimeout)
	s.TransactionStatusResultEndpoint = m(s.TransactionStatusResultEndpoint)
	s.ReversalTimeout = m(s.ReversalTimeout)
	s.ReversalResultEndpoint = m(s.ReversalResultEndpoint)
	s.B2CTimeout = m(s.B2CTimeout)
	s.B2CResult = m(s.B2CResult)
	s.C2BValidation = m(s.C2BValidation)
	s.C2BConfirmation = m(s.C2BConfirmation)
}

// Mount configures the mux to serve the mpesa endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAccountBalanceTimeoutHandler(mux, h.AccountBalanceTimeout)
	MountAccountBalanceResultEndpointHandler(mux, h.AccountBalanceResultEndpoint)
	MountTransactionStatusTimeoutHandler(mux, h.TransactionStatusTimeout)
	MountTransactionStatusResultEndpointHandler(mux, h.TransactionStatusResultEndpoint)
	MountReversalTimeoutHandler(mux, h.ReversalTimeout)
	MountReversalResultEndpointHandler(mux, h.ReversalResultEndpoint)
	MountB2CTimeoutHandler(mux, h.B2CTimeout)
	MountB2CResultHandler(mux, h.B2CResult)
	MountC2BValidationHandler(mux, h.C2BValidation)
	MountC2BConfirmationHandler(mux, h.C2BConfirmation)
}

// MountAccountBalanceTimeoutHandler configures the mux to serve the "mpesa"
// service "AccountBalanceTimeout" endpoint.
func MountAccountBalanceTimeoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/accountbalance/v1/timeout", f)
}

// NewAccountBalanceTimeoutHandler creates a HTTP handler which loads the HTTP
// request and calls the "mpesa" service "AccountBalanceTimeout" endpoint.
func NewAccountBalanceTimeoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountBalanceTimeoutRequest(mux, decoder)
		encodeResponse = EncodeAccountBalanceTimeoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountBalanceTimeout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAccountBalanceResultEndpointHandler configures the mux to serve the
// "mpesa" service "AccountBalanceResult" endpoint.
func MountAccountBalanceResultEndpointHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/accountbalance/v1/result", f)
}

// NewAccountBalanceResultEndpointHandler creates a HTTP handler which loads
// the HTTP request and calls the "mpesa" service "AccountBalanceResult"
// endpoint.
func NewAccountBalanceResultEndpointHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAccountBalanceResultEndpointRequest(mux, decoder)
		encodeResponse = EncodeAccountBalanceResultEndpointResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AccountBalanceResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransactionStatusTimeoutHandler configures the mux to serve the "mpesa"
// service "TransactionStatusTimeout" endpoint.
func MountTransactionStatusTimeoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/transactionstatus/v1/timeout", f)
}

// NewTransactionStatusTimeoutHandler creates a HTTP handler which loads the
// HTTP request and calls the "mpesa" service "TransactionStatusTimeout"
// endpoint.
func NewTransactionStatusTimeoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransactionStatusTimeoutRequest(mux, decoder)
		encodeResponse = EncodeTransactionStatusTimeoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TransactionStatusTimeout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransactionStatusResultEndpointHandler configures the mux to serve the
// "mpesa" service "TransactionStatusResult" endpoint.
func MountTransactionStatusResultEndpointHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/transactionstatus/v1/result", f)
}

// NewTransactionStatusResultEndpointHandler creates a HTTP handler which loads
// the HTTP request and calls the "mpesa" service "TransactionStatusResult"
// endpoint.
func NewTransactionStatusResultEndpointHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransactionStatusResultEndpointRequest(mux, decoder)
		encodeResponse = EncodeTransactionStatusResultEndpointResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TransactionStatusResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReversalTimeoutHandler configures the mux to serve the "mpesa" service
// "ReversalTimeout" endpoint.
func MountReversalTimeoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/reversal/v1/timeout", f)
}

// NewReversalTimeoutHandler creates a HTTP handler which loads the HTTP
// request and calls the "mpesa" service "ReversalTimeout" endpoint.
func NewReversalTimeoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReversalTimeoutRequest(mux, decoder)
		encodeResponse = EncodeReversalTimeoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ReversalTimeout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReversalResultEndpointHandler configures the mux to serve the "mpesa"
// service "ReversalResult" endpoint.
func MountReversalResultEndpointHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/reversal/v1/result", f)
}

// NewReversalResultEndpointHandler creates a HTTP handler which loads the HTTP
// request and calls the "mpesa" service "ReversalResult" endpoint.
func NewReversalResultEndpointHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReversalResultEndpointRequest(mux, decoder)
		encodeResponse = EncodeReversalResultEndpointResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ReversalResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountB2CTimeoutHandler configures the mux to serve the "mpesa" service
// "B2CTimeout" endpoint.
func MountB2CTimeoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/b2c/v1/timeout", f)
}

// NewB2CTimeoutHandler creates a HTTP handler which loads the HTTP request and
// calls the "mpesa" service "B2CTimeout" endpoint.
func NewB2CTimeoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeB2CTimeoutRequest(mux, decoder)
		encodeResponse = EncodeB2CTimeoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "B2CTimeout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountB2CResultHandler configures the mux to serve the "mpesa" service
// "B2CResult" endpoint.
func MountB2CResultHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/b2c/v1/result", f)
}

// NewB2CResultHandler creates a HTTP handler which loads the HTTP request and
// calls the "mpesa" service "B2CResult" endpoint.
func NewB2CResultHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeB2CResultRequest(mux, decoder)
		encodeResponse = EncodeB2CResultResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "B2CResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountC2BValidationHandler configures the mux to serve the "mpesa" service
// "C2BValidation" endpoint.
func MountC2BValidationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/c2b/v1/validation", f)
}

// NewC2BValidationHandler creates a HTTP handler which loads the HTTP request
// and calls the "mpesa" service "C2BValidation" endpoint.
func NewC2BValidationHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeC2BValidationRequest(mux, decoder)
		encodeResponse = EncodeC2BValidationResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "C2BValidation")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountC2BConfirmationHandler configures the mux to serve the "mpesa" service
// "C2BConfirmation" endpoint.
func MountC2BConfirmationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mpesa/c2b/v1/confirmation", f)
}

// NewC2BConfirmationHandler creates a HTTP handler which loads the HTTP
// request and calls the "mpesa" service "C2BConfirmation" endpoint.
func NewC2BConfirmationHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeC2BConfirmationRequest(mux, decoder)
		encodeResponse = EncodeC2BConfirmationResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "C2BConfirmation")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mpesa")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
