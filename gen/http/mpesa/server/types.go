// Code generated by goa v3.1.2, DO NOT EDIT.
//
// mpesa HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package server

import (
	"unicode/utf8"

	mpesa "github.com/wondenge/listeners/gen/mpesa"
	goa "goa.design/goa/v3/pkg"
)

// AccountBalanceTimeoutRequestBody is the type of the "mpesa" service
// "AccountBalanceTimeout" endpoint HTTP request body.
type AccountBalanceTimeoutRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// AccountBalanceResultRequestBody is the type of the "mpesa" service
// "AccountBalanceResult" endpoint HTTP request body.
type AccountBalanceResultRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// TransactionStatusTimeoutRequestBody is the type of the "mpesa" service
// "TransactionStatusTimeout" endpoint HTTP request body.
type TransactionStatusTimeoutRequestBody struct {
	ResultParameters *string `form:"ResultParameters,omitempty" json:"ResultParameters,omitempty" xml:"ResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// TransactionStatusResultRequestBody is the type of the "mpesa" service
// "TransactionStatusResult" endpoint HTTP request body.
type TransactionStatusResultRequestBody struct {
	ResultParameters *string `form:"ResultParameters,omitempty" json:"ResultParameters,omitempty" xml:"ResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// ReversalTimeoutRequestBody is the type of the "mpesa" service
// "ReversalTimeout" endpoint HTTP request body.
type ReversalTimeoutRequestBody struct {
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// ReversalResultRequestBody is the type of the "mpesa" service
// "ReversalResult" endpoint HTTP request body.
type ReversalResultRequestBody struct {
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// B2CTimeoutRequestBody is the type of the "mpesa" service "B2CTimeout"
// endpoint HTTP request body.
type B2CTimeoutRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// B2CResultRequestBody is the type of the "mpesa" service "B2CResult" endpoint
// HTTP request body.
type B2CResultRequestBody struct {
	MpesaResultParameters *string `form:"MpesaResultParameters,omitempty" json:"MpesaResultParameters,omitempty" xml:"MpesaResultParameters,omitempty"`
	// Status code indicating whether transaction was already sent to your listener
	MpesaResultType *int `form:"MpesaResultType,omitempty" json:"MpesaResultType,omitempty" xml:"MpesaResultType,omitempty"`
	// Numeric status code indicating the status of the transaction processing
	MpesaResultCode *int `form:"MpesaResultCode,omitempty" json:"MpesaResultCode,omitempty" xml:"MpesaResultCode,omitempty"`
	// Message from the API that gives the status of the request
	MpesaResultDesc *string `form:"MpesaResultDesc,omitempty" json:"MpesaResultDesc,omitempty" xml:"MpesaResultDesc,omitempty"`
	// Unique identifier for the transaction request.
	OriginatorConversationID *string `form:"OriginatorConversationId,omitempty" json:"OriginatorConversationId,omitempty" xml:"OriginatorConversationId,omitempty"`
	// Unique identifier for the transaction request.
	ConversationID *string `form:"ConversationId,omitempty" json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	// Unique M-PESA transaction ID for every payment request.
	TransactionID *string `form:"TransactionID,omitempty" json:"TransactionID,omitempty" xml:"TransactionID,omitempty"`
	// Queue Timeout URL
	QueueTimeoutURL *string `form:"QueueTimeoutURL,omitempty" json:"QueueTimeoutURL,omitempty" xml:"QueueTimeoutURL,omitempty"`
	Occasion        *string `form:"Occasion,omitempty" json:"Occasion,omitempty" xml:"Occasion,omitempty"`
}

// C2BValidationRequestBody is the type of the "mpesa" service "C2BValidation"
// endpoint HTTP request body.
type C2BValidationRequestBody struct {
	// Transaction type specified during the payment request.
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Unique M-Pesa transaction ID for every payment request
	TransID *string `form:"TransID,omitempty" json:"TransID,omitempty" xml:"TransID,omitempty"`
	// Timestamp of the transaction
	TransTime *string `form:"TransTime,omitempty" json:"TransTime,omitempty" xml:"TransTime,omitempty"`
	// The Amount transacted normally a numeric value
	TransAmount *int `form:"TransAmount,omitempty" json:"TransAmount,omitempty" xml:"TransAmount,omitempty"`
	// Organizations shortcode (Paybill or Buygoods)
	BusinessShortCode *int `form:"BusinessShortCode,omitempty" json:"BusinessShortCode,omitempty" xml:"BusinessShortCode,omitempty"`
	// Account number for which the customer is making the payment
	BillRefNumber *string `form:"BillRefNumber,omitempty" json:"BillRefNumber,omitempty" xml:"BillRefNumber,omitempty"`
	InvoiceNumber *string `form:"InvoiceNumber,omitempty" json:"InvoiceNumber,omitempty" xml:"InvoiceNumber,omitempty"`
	// Current utility account balance of the payment receiving organization
	// shortcode
	OrgAccountBalance *int    `form:"OrgAccountBalance,omitempty" json:"OrgAccountBalance,omitempty" xml:"OrgAccountBalance,omitempty"`
	ThirdPartyTransID *string `form:"ThirdPartyTransID,omitempty" json:"ThirdPartyTransID,omitempty" xml:"ThirdPartyTransID,omitempty"`
	// Mobile number of the customer making the payment.
	MSISDN *int `form:"MSISDN,omitempty" json:"MSISDN,omitempty" xml:"MSISDN,omitempty"`
	// First Name of the customer making the payment.
	FirstName *string `form:"FirstName,omitempty" json:"FirstName,omitempty" xml:"FirstName,omitempty"`
	// Middle Name of the customer making the payment.
	MiddleName *string `form:"MiddleName,omitempty" json:"MiddleName,omitempty" xml:"MiddleName,omitempty"`
	// Last Name of the customer making payment.
	LastName *string `form:"LastName,omitempty" json:"LastName,omitempty" xml:"LastName,omitempty"`
}

// C2BConfirmationRequestBody is the type of the "mpesa" service
// "C2BConfirmation" endpoint HTTP request body.
type C2BConfirmationRequestBody struct {
	// Transaction type specified during the payment request.
	TransactionType *string `form:"TransactionType,omitempty" json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
	// Unique M-Pesa transaction ID for every payment request
	TransID *string `form:"TransID,omitempty" json:"TransID,omitempty" xml:"TransID,omitempty"`
	// Timestamp of the transaction
	TransTime *string `form:"TransTime,omitempty" json:"TransTime,omitempty" xml:"TransTime,omitempty"`
	// The Amount transacted normally a numeric value
	TransAmount *int `form:"TransAmount,omitempty" json:"TransAmount,omitempty" xml:"TransAmount,omitempty"`
	// Organizations shortcode (Paybill or Buygoods)
	BusinessShortCode *int `form:"BusinessShortCode,omitempty" json:"BusinessShortCode,omitempty" xml:"BusinessShortCode,omitempty"`
	// Account number for which the customer is making the payment
	BillRefNumber *string `form:"BillRefNumber,omitempty" json:"BillRefNumber,omitempty" xml:"BillRefNumber,omitempty"`
	InvoiceNumber *string `form:"InvoiceNumber,omitempty" json:"InvoiceNumber,omitempty" xml:"InvoiceNumber,omitempty"`
	// Current utility account balance of the payment receiving organization
	// shortcode
	OrgAccountBalance *int    `form:"OrgAccountBalance,omitempty" json:"OrgAccountBalance,omitempty" xml:"OrgAccountBalance,omitempty"`
	ThirdPartyTransID *string `form:"ThirdPartyTransID,omitempty" json:"ThirdPartyTransID,omitempty" xml:"ThirdPartyTransID,omitempty"`
	// Mobile number of the customer making the payment.
	MSISDN *int `form:"MSISDN,omitempty" json:"MSISDN,omitempty" xml:"MSISDN,omitempty"`
	// First Name of the customer making the payment.
	FirstName *string `form:"FirstName,omitempty" json:"FirstName,omitempty" xml:"FirstName,omitempty"`
	// Middle Name of the customer making the payment.
	MiddleName *string `form:"MiddleName,omitempty" json:"MiddleName,omitempty" xml:"MiddleName,omitempty"`
	// Last Name of the customer making payment.
	LastName *string `form:"LastName,omitempty" json:"LastName,omitempty" xml:"LastName,omitempty"`
}

// NewAccountBalanceTimeoutAccountBalanceResult builds a mpesa service
// AccountBalanceTimeout endpoint payload.
func NewAccountBalanceTimeoutAccountBalanceResult(body *AccountBalanceTimeoutRequestBody) *mpesa.AccountBalanceResult {
	v := &mpesa.AccountBalanceResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewAccountBalanceResult builds a mpesa service AccountBalanceResult endpoint
// payload.
func NewAccountBalanceResult(body *AccountBalanceResultRequestBody) *mpesa.AccountBalanceResult {
	v := &mpesa.AccountBalanceResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewTransactionStatusTimeoutTransactionStatusResult builds a mpesa service
// TransactionStatusTimeout endpoint payload.
func NewTransactionStatusTimeoutTransactionStatusResult(body *TransactionStatusTimeoutRequestBody) *mpesa.TransactionStatusResult {
	v := &mpesa.TransactionStatusResult{
		ResultParameters:         body.ResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewTransactionStatusResult builds a mpesa service TransactionStatusResult
// endpoint payload.
func NewTransactionStatusResult(body *TransactionStatusResultRequestBody) *mpesa.TransactionStatusResult {
	v := &mpesa.TransactionStatusResult{
		ResultParameters:         body.ResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewReversalTimeoutReversalResult builds a mpesa service ReversalTimeout
// endpoint payload.
func NewReversalTimeoutReversalResult(body *ReversalTimeoutRequestBody) *mpesa.ReversalResult {
	v := &mpesa.ReversalResult{
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewReversalResult builds a mpesa service ReversalResult endpoint payload.
func NewReversalResult(body *ReversalResultRequestBody) *mpesa.ReversalResult {
	v := &mpesa.ReversalResult{
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewB2CTimeoutB2CPaymentResult builds a mpesa service B2CTimeout endpoint
// payload.
func NewB2CTimeoutB2CPaymentResult(body *B2CTimeoutRequestBody) *mpesa.B2CPaymentResult {
	v := &mpesa.B2CPaymentResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewB2CResultB2CPaymentResult builds a mpesa service B2CResult endpoint
// payload.
func NewB2CResultB2CPaymentResult(body *B2CResultRequestBody) *mpesa.B2CPaymentResult {
	v := &mpesa.B2CPaymentResult{
		MpesaResultParameters:    body.MpesaResultParameters,
		MpesaResultType:          body.MpesaResultType,
		MpesaResultCode:          body.MpesaResultCode,
		MpesaResultDesc:          body.MpesaResultDesc,
		OriginatorConversationID: body.OriginatorConversationID,
		ConversationID:           body.ConversationID,
		TransactionID:            body.TransactionID,
		QueueTimeoutURL:          body.QueueTimeoutURL,
		Occasion:                 body.Occasion,
	}

	return v
}

// NewC2BValidationValidationResult builds a mpesa service C2BValidation
// endpoint payload.
func NewC2BValidationValidationResult(body *C2BValidationRequestBody) *mpesa.ValidationResult {
	v := &mpesa.ValidationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v
}

// NewC2BConfirmationConfirmationResult builds a mpesa service C2BConfirmation
// endpoint payload.
func NewC2BConfirmationConfirmationResult(body *C2BConfirmationRequestBody) *mpesa.ConfirmationResult {
	v := &mpesa.ConfirmationResult{
		TransactionType:   body.TransactionType,
		TransID:           body.TransID,
		TransTime:         body.TransTime,
		TransAmount:       body.TransAmount,
		BusinessShortCode: body.BusinessShortCode,
		BillRefNumber:     body.BillRefNumber,
		InvoiceNumber:     body.InvoiceNumber,
		OrgAccountBalance: body.OrgAccountBalance,
		ThirdPartyTransID: body.ThirdPartyTransID,
		MSISDN:            body.MSISDN,
		FirstName:         body.FirstName,
		MiddleName:        body.MiddleName,
		LastName:          body.LastName,
	}

	return v
}

// ValidateC2BValidationRequestBody runs the validations defined on
// C2BValidationRequestBody
func ValidateC2BValidationRequestBody(body *C2BValidationRequestBody) (err error) {
	if body.TransactionType != nil {
		if !(*body.TransactionType == "Buy Goods" || *body.TransactionType == "Pay Bill") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionType", *body.TransactionType, []interface{}{"Buy Goods", "Pay Bill"}))
		}
	}
	if body.TransTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.TransTime", *body.TransTime, goa.FormatDateTime))
	}
	if body.BillRefNumber != nil {
		if utf8.RuneCountInString(*body.BillRefNumber) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.BillRefNumber", *body.BillRefNumber, utf8.RuneCountInString(*body.BillRefNumber), 20, false))
		}
	}
	return
}

// ValidateC2BConfirmationRequestBody runs the validations defined on
// C2BConfirmationRequestBody
func ValidateC2BConfirmationRequestBody(body *C2BConfirmationRequestBody) (err error) {
	if body.TransactionType != nil {
		if !(*body.TransactionType == "Buy Goods" || *body.TransactionType == "Pay Bill") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.TransactionType", *body.TransactionType, []interface{}{"Buy Goods", "Pay Bill"}))
		}
	}
	if body.TransTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.TransTime", *body.TransTime, goa.FormatDateTime))
	}
	if body.BillRefNumber != nil {
		if utf8.RuneCountInString(*body.BillRefNumber) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.BillRefNumber", *body.BillRefNumber, utf8.RuneCountInString(*body.BillRefNumber), 20, false))
		}
	}
	return
}
