// Code generated by goa v3.1.2, DO NOT EDIT.
//
// jenga endpoints
//
// Command:
// $ goa gen github.com/wondenge/listeners/design

package jenga

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "jenga" service endpoints.
type Endpoints struct {
	Publish endpoint.Endpoint
	Alerts  endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "jenga" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Publish: NewPublishEndpoint(s),
		Alerts:  NewAlertsEndpoint(s),
	}
}

// Use applies the given middleware to all the "jenga" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.Publish = m(e.Publish)
	e.Alerts = m(e.Alerts)
}

// NewPublishEndpoint returns an endpoint function that calls the method
// "publish" of service "jenga".
func NewPublishEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*JengaCallbackPayload)
		return s.Publish(ctx, p)
	}
}

// NewAlertsEndpoint returns an endpoint function that calls the method
// "alerts" of service "jenga".
func NewAlertsEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AccountAlerts)
		return s.Alerts(ctx, p)
	}
}
